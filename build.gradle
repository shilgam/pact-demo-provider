plugins {
	id "au.com.dius.pact" version "4.1.7"
	id "com.wiredforcode.spawn" version "0.8.2"
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

springBoot {
  mainClassName = 'productservice.ProductServiceApplication'
}

task startProvider(type: SpawnProcessTask, dependsOn: 'assemble') {
  command "java -Dspring.profiles.active=test -jar ${jar.archivePath}"
  ready 'Started ProductServiceApplication'
}

task stopProvider(type: KillProcessTask) {

}

def getLastCommitHash() {
    return ['sh', '-c', 'git rev-parse HEAD | tr -d "\n"'].execute().text
}

def getCurrentBranchName() {
    return ['sh', '-c', 'git rev-parse --abbrev-ref HEAD | tr -d "\n"'].execute().text
}

def branchName = System.getenv('TRAVIS_BRANCH') ?: getCurrentBranchName()

def commitHash = System.getenv('TRAVIS_COMMIT') ?: getLastCommitHash()

pact {
	if ((System.getenv('LOCAL_PACT_BROKER') == 'true')) {
		println('Getting pact file(s) from Local Pact Broker...')
		broker {
			pactBrokerUrl = project.localpactBrokerUrl
			/* to use basic auth */
			pactBrokerUsername = project.localpactBrokerUsername
			pactBrokerPassword = project.localpactBrokerPassword
		}
	} else {
		println('Getting pact file(s) from Remote Pact Broker...')
		broker {
			pactBrokerUrl = project.pactBrokerUrl
			/* to use a bearer token */
			pactBrokerToken = (project.pactBrokerToken == '<YOUR TOKEN>') ? System.getenv('PACT_BROKER_TOKEN') : project.pactBrokerToken
		}
	}

  serviceProviders {
    'pact-demo-provider' {
      port = 8080

			fromPactBroker {
				selectors = latestTags('master_v1', 'prod')
				enablePending = false
				providerTags = [branchName]
			}

      startProviderTask = startProvider
      terminateProviderTask = stopProvider
      stateChangeUrl = url('http://localhost:8080/pactStateChange')
      providerVersion = { commitHash }
    }
  }
}
